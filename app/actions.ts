"use server"

import { prisma } from "@/prisma/prisma-client"
import { PayOrderTemplate, VerificationUserTemplate } from "@/shared/components/shared/email-templates"

import { CheckoutFormValues } from "@/shared/constants"
import { createPayment } from "@/shared/lib"
import { getUserSession } from "@/shared/lib/get-user-session"
import { sendEmail } from "@/shared/lib/sendEmail"
import { OrderStatus, Prisma } from "@prisma/client"
import { hashSync } from "bcrypt"
import { cookies } from "next/headers"
import { number } from "zod"

export async function createOrder(data: CheckoutFormValues) {
  try {
    const cookieStore = cookies()
    const cartToken = cookieStore.get("cartToken")?.value

    if (!cartToken) {
      throw new Error("Cart token not found")
    }

    /* –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ —Ç–æ–∫–µ–Ω */
    const userCart = await prisma.cart.findFirst({
      include: {
        user: true,
        items: {
          include: {
            ingredients: true,
            productItem: {
              include: {
                product: true,
              },
            },
          },
        },
      },
      where: {
        token: cartToken,
      },
    })

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (!userCart) {
      throw new Error("Cart not found")
    }

    /* –ï—Å–ª–∏ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞—è —Ç–∞–∫ –∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É */
    if (userCart?.totalAmount === 0) {
      throw new Error("Cart is empty")
    }

    /* –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ */
    const order = await prisma.order.create({
      data: {
        token: cartToken,
        fullName: data.firstName + " " + data.lastName,
        email: data.email,
        phone: data.phone,
        address: data.address,
        comment: data.comment,
        totalAmount: userCart.totalAmount,
        status: OrderStatus.PENDING,
        items: JSON.stringify(userCart.items),
      },
    })

    /* –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É */
    await prisma.cart.update({
      where: {
        id: userCart.id,
      },
      data: {
        totalAmount: 0,
      },
    })

    /* —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π */
    await prisma.cartItem.deleteMany({
      where: {
        cartId: userCart.id,
      },
    })

    /* —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ */
    const paymentData = await createPayment({
      amount: order.totalAmount,
      orderId: order.id,
      description: "–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ ‚Ññ" + order.id,
    })

    if (!paymentData) {
      throw new Error("Payment data not found")
    }

    /* –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –¥–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç –Æ–∫–∞—Å—Å—ã –≤ –ë–î */
    await prisma.order.update({
      where: {
        id: order.id,
      },
      data: {
        paymendId: paymentData.id,
      },
    })

    /* –ë–µ—Ä–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ –Æ–∫–∞—Å—Å–µ */
    const paymentUrl = paymentData.confirmation.confirmation_url

    /* –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É */
    await sendEmail(
      data.email,
      "Next Pizza | –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ #" + order.id,
      PayOrderTemplate(order.id, order.totalAmount, paymentUrl)
    )

    /* –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Å—ã–ª–∫—É */
    return paymentUrl
  } catch (err) {
    console.error("[CreateOrder] Server error", err)
  }
}

export async function updateUserInfo(body: Prisma.UserUpdateInput) {
  try {
    const currentUser = await getUserSession()

    if (!currentUser) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    }

    const findUser = await prisma.user.findFirst({
      where: {
        id: Number(currentUser.id),
      },
    })

    await prisma.user.update({
      where: { id: Number(currentUser.id) },
      data: {
        fullName: body.fullName,
        email: body.email,
        password: body.password
          ? hashSync(body.password as string, 10)
          : findUser?.password,
      },
    })
  } catch (err) {
    console.error("Error [UPDATE_USER", err)
    throw err
  }
}

export async function registerUser(body: Prisma.UserCreateInput) {
  try {
    const user = await prisma.user.findFirst({
      where: {
        email: body.email,
      },
    })

    if (user) {
      if (!user.verified) {
        throw new Error("–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
      }
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    }

    const createdUser = await prisma.user.create({
      data: {
        email: body.email,
        password: hashSync(body.password as string, 10),
        fullName: body.fullName,
      },
    })

    const code = Math.floor(100000 + Math.random() * 800000).toString()

    await prisma.verificationCode.create({
      data: {
        code,
        userId: createdUser.id,
      },
    })

    /* –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ –∫–ª–∏–µ–Ω—Ç—É */
    await sendEmail(
      createdUser.email,
      "Alias Pizza | üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      VerificationUserTemplate(code)
    )
  } catch (err) {
    console.error("Error [CREATE_USER]", err)
    throw err
  }
}
